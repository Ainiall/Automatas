// MiniLan.cup
// Version para inicial para el Analisis Sintactico 
import java_cup.runtime.*;
action code{:
        NewHashMap table= new NewHashMap();
:};
parser code {:
        public static void main(String args[]) throws Exception {
                new parser(new Yylex(System.in)).parse();        
		} // End Main
:} // End parser code

terminal BEGIN, END, PRINT;
terminal PLUS, MINUS, MULT, DIV;
terminal GT,LT,EQ,OR;
terminal EOS, LP, RP;
terminal Double NUMBER;
terminal String IDENT, SET;
terminal PE,ME;

non terminal program, instructions, instruction, sentence, printSentence, assignSentence;
non terminal Double arithExpr, term, factor;
non terminal Boolean boolTerm, booleanExpr;


program		::= BEGIN instructions END			{: System.out.println("    PARSER:: program <== BEGIN instructions END"); :}
					;

instructions	::= instructions instruction          {: System.out.println("    PARSER:: instructions <== instructions instruction");:} 	
					| instruction                      {: System.out.println("    PARSER:: instructions <== instruction");:} 	
					;

instruction    	::= sentence EOS                      {: System.out.println("    PARSER:: instruction <== sentence EOS");:} 
					;	

sentence        ::= printSentence                     {: System.out.println("    PARSER:: sentence <== printSentence ");:} 	
					|assignSentence 		      	  {: System.out.println("	 PARSER:: sentence <== assignSentence ");:} 
					;
				   
printSentence   ::= PRINT LP arithExpr:a RP             
                        {: System.out.println("    PARSER:: printSentence <== PRINT ( arithExpr<"+a+"> )"); :}
                    | PRINT LP booleanExpr:b RP
                        {: System.out.println("    PARSER:: printSentence <== PRINT ( booleanExpr<"+b+"> )"); :}
					;
				   
assignSentence  ::= IDENT:id SET arithExpr:v	      
						{: table.put(id, v); 
						System.out.println("	PARSER:: assignSencence <== IDENT<"+id+"> SET arithExpr<"+v+">"); :}
					|IDENT:id PE arithExpr:v           			
						{: table.put(id,v +(Double) table.get(id)); 
						System.out.println("    PARSER:: assingSentence <==  IDENT<"+id+"> PE arithExpr<"+v+">"); :}
					|IDENT:id ME arithExpr:v            			
						{: table.put(id,v * (Double) table.get(id)); 
						System.out.println("    PARSER:: assingSentence <==  IDENT<"+id+"> ME arithExpr<"+v+">"); :}
					;
					
boolExpr     ::= boolExpr:a OR boolTerm:b                         
                        {: RESULT=(boolean) a|| (boolean)b;
                        System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a+" OR "+b); :} 
					|boolTerm:b                             
                        {: RESULT=b;
                        System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+b); :}
                    ;

boolTerm        ::= arithExpr:a GT arithExpr:b
                        {: RESULT=a>b;
                        System.out.println("    PARSER:: boolTerm<"+RESULT+"> <== "+a+" GT "+b); :} 
					| arithExpr:a LT arithExpr:b         
                        {: RESULT=a<b;
                        System.out.println("    PARSER:: boolTerm<"+RESULT+"> <== "+a+" LT "+b); :} 
					| arithExpr:a EQ arithExpr:b                         
                        {: RESULT=a.equals(b);
                        System.out.println("    PARSER:: boolTerm<"+RESULT+"> <== "+a+" EQ "+b); :} 
					;

arithExpr       ::= arithExpr:a PLUS term:t               
                        {: RESULT=a+t;
                        System.out.println("    PARSER:: arithExp<"+RESULT+"> <== arithExpr<"+a+"> PLUS term<"+t+">"); :} 
                   | arithExpr:a MINUS term:t             
                        {: RESULT=a-t;
                        System.out.println("    PARSER:: arithExp<"+RESULT+"> <== arithExpr<"+a+"> MINUS term<"+t+">"); :} 
                   | term:t                             
                        {: RESULT=t;
                        System.out.println("    PARSER:: arithExp<"+RESULT+"> <== term<"+t+">"); :}
                   ;


term            ::= term:t MULT factor:f                  
                        {: RESULT=t*f;
                        System.out.println("    PARSER:: term <"+RESULT+"><== term<"+t+"> MULT factor<"+f+">"); :} 
                   | term:t DIV factor:f                  
                        {: RESULT=t/f;
                        System.out.println("    PARSER:: term <"+RESULT+"><== term<"+t+"> DIV factor<"+f+">"); :}
                   | factor:f                           
                        {: RESULT=f;
                        System.out.println("    PARSER:: term<"+RESULT+"> <== factor<"+f+">"); :}
                   ;
					
factor          ::= NUMBER:n                          
                        {: RESULT=n;
                        System.out.println("    PARSER:: factor<"+RESULT+"> <== NUMBER<"+n+"> "); :} 
                   | PLUS factor:f                     
                        {: RESULT=+f;
                        System.out.println("    PARSER:: factor<"+RESULT+"> <== PLUS factor<"+f+"> "); :} 
                   | MINUS factor:f                     
                        {: RESULT=-f;
                        System.out.println("   PARSER:: factor<"+RESULT+"> <== MINUS factor<"+f+"> "); :} 
                   | LP arithExpr:a RP                  
                        {: RESULT=(a);
                        System.out.println("    PARSER:: factor<"+RESULT+"> <== LP arithExpr<"+a+"> RP"); :}
                   | IDENT:id 
						{: RESULT=(Double)table.get(id);
						System.out.println("	PARSER:: factor<"+RESULT+"> <==IDENT<"+id+":"+RESULT+">"); :} 
					;
