// MiniLan.cup
// Version para inicial para el Analisis Sintactico 
import java_cup.runtime.*;

action code {:
	NewHashMap table = new NewHashMap();
:};
parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	} // End Main
:} // End parser code

terminal BEGIN, END, PRINT;
terminal PLUS, MINUS, MULT, DIV;
terminal EOS, LP, RP;
terminal GT, LT, EQ, OR;
terminal Double NUMBER;
terminal String IDENT;
terminal SET, ME, PE;


non terminal program, instructions, instruction, sentence, printSentence, assignSentence;
non terminal Double arithExpr, term, factor;
non terminal Boolean boolExpr, boolTerm;


program		    ::= BEGIN instructions END              {: System.out.println("    PARSER:: program <== BEGIN instructions END"); :}
                 ;

instructions	::= instructions instruction            {: System.out.println("    PARSER:: instructions <== instructions instruction");:} 	
                 | instruction                          {: System.out.println("    PARSER:: instructions <== instruction");:} 	
                 ;

instruction    	::= sentence EOS                        {: System.out.println("    PARSER:: instruction <== sentence EOS");:} 
                 ;	

sentence        ::= printSentence                       {: System.out.println("    PARSER:: sentence <== printSentence ");:} 
				 | assignSentence                       {: System.out.println("    PARSER:: sentence <== assignSentence ");:} 	
                 ;
					
printSentence   ::= PRINT LP arithExpr:a RP             {: System.out.println(" PARSER:: printSentence <== PRINT (arithExpr<"+a+ ">)"); :}
				 | PRINT LP boolExpr:a RP               {: System.out.println(" PARSER:: printSentence <== PRINT (boolExpr<"+a+ ">)"); :}
                 ;
				   
assignSentence  ::= IDENT:id SET arithExpr:v            
					{: table.put(id,v);
					System.out.println("PARSER:: assignSentence <== IDENT <" + id + "> EQ arithExpr <" + v + "> "); :}
				| IDENT:id PE arithExpr:v        
					{: Double n = (Double) table.get(id) + v;
                    table.put(id,n);
                    System.out.println(" PARSER:: assignSentence <== IDENT <" + id + "> PE arithExpr <" + v + "> ");:}
                | IDENT:id ME arithExpr:v   
					{: Double n = (Double) table.get(id) * v;
					table.put(id,n);
					System.out.println(" PARSER:: assignSentence <== IDENT <" + id + "> SUMSET arithExpr <" + v + "> ");:}
			     ;
				
boolExpr        ::=  boolExpr:b1 OR boolTerm:b2        
					{: RESULT= b1 | b2 ; 
					System.out.println(" PARSER:: boolExpr<"+RESULT+"> <== boolExpr<"+b1+"> OR boolTerm<"+b2+">"); :} 
                | boolTerm:b1                         
					{: RESULT= b1; System.out.println(" PARSER:: boolExpr<"+RESULT+">"); :} 
				 ;
				 
boolTerm       ::= arithExpr:n1 LT arithExpr:n2        
					{: RESULT= n1<n2; 
					System.out.println(" PARSER:: boolTerm<"+RESULT+"> <== arithExpr<"+n1+"> LT arithExpr<"+n2+">"); :}
				 | arithExpr:n1 GT arithExpr:n2         
					{: RESULT= n1>n2; 
					System.out.println(" PARSER:: boolTerm<"+RESULT+"> <== arithExpr<"+n1+"> GT arithExpr<"+n2+">"); :}
                 | arithExpr:n1 EQ arithExpr:n2         
					{: RESULT= n1.equals(n2); 
					System.out.println(" PARSER:: boolTerm<"+RESULT+"> <== arithExpr<"+n1+"> EQ arithExpr<"+n2+">"); :}
				 ;
				   
arithExpr       ::= arithExpr:a PLUS term:t            
					{: RESULT= a+t; 
					System.out.println(" PARSER:: term<"+RESULT+"> <== arithExpr<"+a+"> PLUS term<"+t+">"); :} 
				 |arithExpr:a MINUS term:t             
					{: RESULT= a-t; 
					System.out.println(" PARSER:: term<"+RESULT+"> <== arithExpr<"+a+"> MINUS term<"+t+">"); :}
                 | term:t                              
					{: RESULT= t; System.out.println(" PARSER:: arithExpr<"+RESULT+"> <== factor<"+t+">"); :}
                 ;
				
term            ::= term:t MULT factor:f               
					{: RESULT= t*f; 
					System.out.println(" PARSER:: term<"+RESULT+"> <== term<"+t+"> MULT factor<"+f+">"); :} 
				 |term:t DIV factor:f                  
					{: RESULT= t/f; 
					System.out.println(" PARSER:: term<"+RESULT+"> <== term<"+t+"> DIV factor<"+f+">"); :} 
                 | factor:f                            
					{: RESULT= f; 
					System.out.println(" PARSER:: term<"+RESULT+"> <== factor<"+f+">"); :}
                 ;
					
factor          ::= NUMBER:n1                          
					{: RESULT= n1; System.out.println(" PARSER:: factor<"+RESULT+"> <== factor<"+n1+">"); :}
				 | LP arithExpr:n1 RP                  
					{: RESULT= n1; System.out.println(" PARSER:: factor<"+RESULT+"> <== arithExpr<-"+n1+">"); :}
				 |MINUS factor:n1                      
					{: RESULT= -n1; System.out.println(" PARSER:: factor<"+RESULT+"> <== factor<-"+n1+">"); :}
				 |PLUS factor:n1                       
					{: RESULT= +n1; System.out.println(" PARSER:: factor<"+RESULT+"> <== factor<-"+n1+">"); :}
				 |IDENT:name						   
					{:RESULT=(Double) table.get(name); 
					System.out.println("PARSER:: name<"+name+"> value<"+name+">"); :}
				 ;
					

		


				   

 
				   



